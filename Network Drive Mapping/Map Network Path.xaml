<Activity mc:Ignorable="sap sap2010" x:Class="ConnectNetworkShare" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ss="clr-namespace:System.Security;assembly=mscorlib" xmlns:str="clr-namespace:System.Text.RegularExpressions;assembly=System" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Username" Type="InArgument(x:String)" />
    <x:Property Name="in_Password" Type="InArgument(ss:SecureString)" />
    <x:Property sap2010:Annotation.AnnotationText="The network path to be mapped to a particular drive" Name="in_NetworkPath" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="The drive name to which the network path has been mapped. E.g. &quot;Z&quot;" Name="out_DriveLetter" Type="OutArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>864.8,1721.6</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ConnectNetworkShare_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="52">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Management.Automation</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Net</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Reflection</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="46">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Management.Automation</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Maps a network drive onto a drive letter and outputs the mapped drive letter. " DisplayName="connect network drive" sap:VirtualizedContainerService.HintSize="660.8,1516.8" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:IEnumerable(str:Match)" Name="DriveRegexArray" />
      <Variable x:TypeArguments="x:String" Name="StandardOutput" />
      <Variable x:TypeArguments="x:String" Name="StandardError" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[in_NetworkPath.EndsWith(&quot;\&quot;)]" sap:VirtualizedContainerService.HintSize="619.2,209.6" sap2010:WorkflowViewState.IdRef="If_8">
      <If.Then>
        <Assign DisplayName="Assign - Remove slash in the end of path" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_10">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[in_NetworkPath]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[Left(in_NetworkPath, Len(in_NetworkPath) - 1)]</InArgument>
          </Assign.Value>
        </Assign>
      </If.Then>
    </If>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="619.2,396" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="string argumentsString;&#xA;        if (String.IsNullOrEmpty(in_Username))&#xA;            argumentsString = &quot;use * \&quot;&quot; + in_NetworkPath + &quot;\&quot; /persistent:no&quot;;&#xA;        else&#xA;            argumentsString = &quot;use * \&quot;&quot; + in_NetworkPath + &quot;\&quot; /persistent:no /User:&quot; + in_Username + &quot; &quot; + new System.Net.NetworkCredential(String.Empty, in_Password).Password + &quot;&quot;;&#xA;&#x9;&#x9;&#xA;        System.Diagnostics.Process mapDriveProcess = new System.Diagnostics.Process()&#xA;        {&#xA;            StartInfo = new System.Diagnostics.ProcessStartInfo()     &#xA;            {&#xA;                FileName = &quot;net.exe&quot;,&#xA;                Arguments = argumentsString,&#xA;                UseShellExecute = false,&#xA;                RedirectStandardOutput = true,&#xA;                RedirectStandardError = true,&#xA;                CreateNoWindow = true&#xA;            }&#xA;        };&#xA;&#x9;&#x9;mapDriveProcess.Start();&#xA;        bool processFinished = mapDriveProcess.WaitForExit(in_OperationTimeOut);&#xA;        &#xA;&#x9;&#x9;if (processFinished)&#xA;&#x9;        {&#xA;&#x9;            out_StandardOutput = mapDriveProcess.StandardOutput.ReadToEnd();&#xA;&#x9;&#x9;&#x9;&#x9;out_StandardError = mapDriveProcess.StandardError.ReadToEnd();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;        else&#xA;            throw new System.Exception(&quot;Operation timed out. Check if the network drive is password protected&quot;);" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="in_NetworkPath">[in_NetworkPath]</InArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="out_StandardOutput">[StandardOutput]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="out_StandardError">[StandardError]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_Username">[in_Username]</InArgument>
            <InArgument x:TypeArguments="ss:SecureString" x:Key="in_Password">[in_Password]</InArgument>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_OperationTimeOut">30000</InArgument>
          </ui:InvokeCode.Arguments>
        </ui:InvokeCode>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="403.2,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Throw Exception="[exception.InnerException]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Throw_11" />
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <If Condition="[String.IsNullOrEmpty(StandardError)]" DisplayName="If - Log success or error" sap:VirtualizedContainerService.HintSize="619.2,264.8" sap2010:WorkflowViewState.IdRef="If_6">
      <If.Then>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Trace" Message="[StandardOutput]" />
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="241.6,115.2" sap2010:WorkflowViewState.IdRef="Sequence_13">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw DisplayName="Throw - Error" Exception="[new System.Exception(StandardError)]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Throw_9" />
        </Sequence>
      </If.Else>
    </If>
    <ui:Matches BuilderPattern="(?&lt;=\s)\w+(?=:)" DisplayName="Matches - Find Mapped Drive" sap:VirtualizedContainerService.HintSize="619.2,60" sap2010:WorkflowViewState.IdRef="Matches_3" Input="[StandardOutput]" IsBuilderTabModified="True" Model="[{&quot;Index&quot;:0,&quot;OperationID&quot;:&quot;LIT&quot;,&quot;OperationName&quot;:&quot;Literal&quot;,&quot;OperationValue&quot;:&quot;(?&lt;=\\s)\\w+(?=:)&quot;,&quot;QuantifierFirstValue&quot;:&quot;1&quot;,&quot;QuantifierID&quot;:&quot;EXT&quot;,&quot;QuantifierName&quot;:&quot;Exactly&quot;,&quot;QuantifierSecondValue&quot;:null}]" Pattern="(?&lt;=\s)\w+(?=:)" RegexOption="IgnoreCase" Result="[DriveRegexArray]" />
    <If Condition="[String.IsNullOrEmpty(DriveRegexArray(0).ToString)]" DisplayName="If drive not mapped" sap:VirtualizedContainerService.HintSize="619.2,302.4" sap2010:WorkflowViewState.IdRef="If_7">
      <If.Then>
        <Throw DisplayName="Throw AppEx" Exception="[new Exception(string.Format(&quot;Could not map path '{0}' as an network drive due to an unknown error&quot;))]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Throw_10" />
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_14">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_9">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[out_DriveLetter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[DriveRegexArray(0).ToString]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Else>
    </If>
  </Sequence>
</Activity>