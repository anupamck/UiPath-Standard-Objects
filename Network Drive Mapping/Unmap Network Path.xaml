<Activity mc:Ignorable="sap sap2010" x:Class="Util_UnmapNetworkPath" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="The drive letter that has to be disconnected. E.g. &quot;Z:&quot;" Name="in_DriveLetter" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>864.8,2368</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Util_UnmapNetworkPath_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="48">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Management.Automation</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="21">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Management.Automation</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Disconnects a network drive that has already been mapped. Throws an exception if the drive letter isn't already mapped. " DisplayName="Util_UnmapNetworkPath" sap:VirtualizedContainerService.HintSize="702.4,2203.2" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:String[]" Name="DriveLetterArray" />
      <Variable x:TypeArguments="x:Boolean" Name="DriveLetterFound" />
      <Variable x:TypeArguments="x:String" Name="DeleteCmd" />
      <Variable x:TypeArguments="x:Object" Name="PSOut" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Sequence - Input clean up" sap:VirtualizedContainerService.HintSize="660.8,402.4" sap2010:WorkflowViewState.IdRef="Sequence_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign DisplayName="Assign - Remove &quot;\&quot; from drive letter" sap:VirtualizedContainerService.HintSize="483.2,60" sap2010:WorkflowViewState.IdRef="Assign_2">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[in_DriveLetter]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[in_DriveLetter.Replace("\",String.Empty)]</InArgument>
        </Assign.Value>
      </Assign>
      <If Condition="[in_DriveLetter.EndsWith(&quot;:&quot;)]" DisplayName="If " sap:VirtualizedContainerService.HintSize="483.2,209.6" sap2010:WorkflowViewState.IdRef="If_4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Else>
          <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[in_DriveLetter]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_DriveLetter &amp; ":"]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Else>
      </If>
    </Sequence>
    <Sequence DisplayName="Sequence - Pre-Check" sap:VirtualizedContainerService.HintSize="660.8,1034.4" sap2010:WorkflowViewState.IdRef="Sequence_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign DisplayName="Assign - Get existing drives" sap:VirtualizedContainerService.HintSize="560,60" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="s:String[]">[DriveLetterArray]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="s:String[]">[System.IO.DriveInfo.GetDrives().Select(Function(driveInfo) driveInfo.Name).ToArray]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="560,592" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[DriveLetterArray]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="x:String">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="x:String" Name="drive" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="524.8,457.6" sap2010:WorkflowViewState.IdRef="Sequence_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[drive.Contains(in_DriveLetter.ToUpper)]" sap:VirtualizedContainerService.HintSize="483.2,364.8" sap2010:WorkflowViewState.IdRef="If_2">
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="304,215.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[DriveLetterFound]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:Break sap:VirtualizedContainerService.HintSize="262.4,22.4" sap2010:WorkflowViewState.IdRef="Break_1" />
                  </Sequence>
                </If.Then>
              </If>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ForEach>
      <If Condition="[DriveLetterFound = False]" sap:VirtualizedContainerService.HintSize="560,209.6" sap2010:WorkflowViewState.IdRef="If_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Throw DisplayName="Throw - Drive not found" Exception="[New Exception(&quot;Could not find drive letter &quot;&amp; in_DriveLetter &amp;&quot;. Unmapping not successful&quot;)]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </If.Then>
      </If>
    </Sequence>
    <Sequence DisplayName="Sequence - Exceute Powershell command" sap:VirtualizedContainerService.HintSize="660.8,562.4" sap2010:WorkflowViewState.IdRef="Sequence_6">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="StandardOutput" />
        <Variable x:TypeArguments="x:String" Name="StandardError" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="        System.Diagnostics.Process unMapDriveProcess = new System.Diagnostics.Process()&#xD;&#xA;        {&#xD;&#xA;            StartInfo = new System.Diagnostics.ProcessStartInfo()     &#xD;&#xA;            {&#xD;&#xA;                FileName = &quot;net.exe&quot;,&#xD;&#xA;                Arguments = &quot;use &quot; + in_DriveLetter + &quot; /Delete /yes&quot;,&#xD;&#xA;                UseShellExecute = false,&#xD;&#xA;                RedirectStandardOutput = true,&#xD;&#xA;                RedirectStandardError = true,&#xD;&#xA;                CreateNoWindow = true&#xD;&#xA;            }&#xD;&#xA;        };&#xD;&#xA;        unMapDriveProcess.Start();&#xD;&#xA;        unMapDriveProcess.WaitForExit();&#xD;&#xA;&#x9;&#x9;out_StandardOutput = unMapDriveProcess.StandardOutput.ReadToEnd(); &#xD;&#xA;        out_StandardError = unMapDriveProcess.StandardError.ReadToEnd();" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="619.2,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="in_DriveLetter">[in_DriveLetter]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_StandardOutput">[StandardOutput]</OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="out_StandardError">[StandardError]</OutArgument>
        </ui:InvokeCode.Arguments>
      </ui:InvokeCode>
      <If Condition="[String.IsNullOrEmpty(StandardError)]" DisplayName="If - Log success or error" sap:VirtualizedContainerService.HintSize="619.2,264.8" sap2010:WorkflowViewState.IdRef="If_7">
        <If.Then>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Trace" Message="[StandardOutput]" />
        </If.Then>
        <If.Else>
          <Sequence sap:VirtualizedContainerService.HintSize="241.6,115.2" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Throw DisplayName="Throw - Error" Exception="[new System.Exception(StandardError)]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="Throw_3" />
          </Sequence>
        </If.Else>
      </If>
    </Sequence>
  </Sequence>
</Activity>